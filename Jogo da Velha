/*
V0.1
Melhorado o sistema de verificação de termino de jogo.
De 90 Linhas para 19
V0.2
Otimização no codigo do loop e do jogo, menos funções sendo chamadas pelo main.
V0.3
Adicionada uma AI, que ganha boa parte dos jogos(todos contra o random antigo).
*/

#include <iostream>
#include <new>
#include <cstdlib>
#include <time.h>
using namespace std;

class jogo
{
	public:
	
		int vezesJogadas;
		int ultimaJogadaAI;
		int *pPosicoesJogaveis;
		int jogador, CPU;
		int ganhador;
		int *matrizPossibilidades;
		int *possibilidadesPossiveis;
		int randomAI;
		int boolAI;

		void atualizarVezesJogadas(void) { vezesJogadas++; }
		
		int verificarJogadaPermitida(int jogada);
		int jogar(int player, int jogada);
		int AI(void);
		void randomSeqAI(void);
		void possibilidades(int jogada);
		int verificarGanhador(void);
		void print(void);
		
		jogo(void);
		~jogo(void) { }
		
};


	jogo::jogo(void){
	
		vezesJogadas = 0;
		boolAI = 0;
		ultimaJogadaAI = 0;
		jogador = 0, CPU = 0;
		ganhador = 0;
		randomAI = 0;
		pPosicoesJogaveis = new int [ 9 ];
		matrizPossibilidades = new int [ 8 ];
		possibilidadesPossiveis = new int[ 8 ];
		
		srand(time(NULL));
		
		for(int i = 0; i < 9; i++){
			if(i>=1){
				matrizPossibilidades[ i - 1 ] = 0;
				possibilidadesPossiveis[ i - 1] = 0;
			} 
			pPosicoesJogaveis[ i ] = 0;
		}
		
	}
	
	int jogo::verificarJogadaPermitida(int jogada){
	
		if(pPosicoesJogaveis[jogada] != 0){
			return 1;
		}
		else return 0;
	}
	
	void jogo::possibilidades(int jogada){
		
		if( jogada <= 2){
			
			matrizPossibilidades[0]++;
			
			if( jogada == 0 ){
				matrizPossibilidades[3]++;
				matrizPossibilidades[6]++;
			}
			else if( jogada == 1 ){
				matrizPossibilidades[4]++;
			}
			else if( jogada == 2 ){
				matrizPossibilidades[5]++;
				matrizPossibilidades[7]++;
			}
			
		}
		else if( jogada >= 3 && jogada <= 5){
			
			matrizPossibilidades[1]++;
			
			if( jogada == 3 ){
				matrizPossibilidades[3]++;
			}
			else if( jogada == 4 ){
				matrizPossibilidades[4]++;
				matrizPossibilidades[6]++;
				matrizPossibilidades[7]++;
			}
			else if( jogada == 5 ){
				matrizPossibilidades[5]++;
			}
			
		}
		else if( jogada >= 6 ){
			
			matrizPossibilidades[2]++;
			
			if( jogada == 6 ){
				matrizPossibilidades[3]++;
				matrizPossibilidades[7]++;
			}
			else if( jogada == 7 ){
				matrizPossibilidades[4]++;
			}
			else if( jogada == 8 ){
				matrizPossibilidades[5]++;
				matrizPossibilidades[6]++;
			}
			
		}
		
	}
	
	int jogo::jogar(int player, int jogada){
		
		if(verificarJogadaPermitida(jogada) == 0){
			
			pPosicoesJogaveis[jogada] = player;
			if(player == jogador) possibilidades(jogada);
			atualizarVezesJogadas();
			print();
			if(vezesJogadas >= 3) ganhador = verificarGanhador();
			return 0;
		
		}else return 1;
		
	}
	
	void jogo::print(void){
		
		cout << " \n        Jogo da Velha: \n ********* LUST 3:) *********" << endl;
		cout << " \nInstruções: \nSelecionar os quadros de 1 a 9 \nSelecionar 1 para X ou 2 para O \n\n" << endl;
		cout << "Jogador: " << jogador << "   CPU: " << CPU  << "\n\n" << endl;
		
		for(int i = 0; i < 9; i++){
		
			if(i%3==0) cout << "\t   ";
			
			if(pPosicoesJogaveis[i] == 0){
			 if(i<6)  cout << "_";
			 else cout << " ";
			}
			else if(pPosicoesJogaveis[i] == 1) cout << "X";
			else if(pPosicoesJogaveis[i] == 2) cout << "O";
			
			if(i==2 || i==5 || i==8) cout << "\n";
				else cout << "|";
		}
		
		
	}	

	int jogo::verificarGanhador(void){
		
		for(int l = 0, c = 0; l < 9; l = l + 3, c++){
			
			if(pPosicoesJogaveis[l] == jogador && pPosicoesJogaveis[l + 1] == jogador && pPosicoesJogaveis[l + 2] == jogador) return jogador;
			else if(pPosicoesJogaveis[l] == CPU && pPosicoesJogaveis[l + 1] == CPU && pPosicoesJogaveis[l + 2] == CPU) return CPU;
			
			if(pPosicoesJogaveis[c] == jogador && pPosicoesJogaveis[c + 3] == jogador && pPosicoesJogaveis[c + 6] == jogador) return jogador;
			else if(pPosicoesJogaveis[c] == CPU && pPosicoesJogaveis[c + 3] == CPU && pPosicoesJogaveis[c + 6] == CPU) return CPU;
			
		}
		
		if(pPosicoesJogaveis[0] == jogador && pPosicoesJogaveis[4] == jogador && pPosicoesJogaveis[8] == jogador) return jogador;
		else if(pPosicoesJogaveis[0] == CPU && pPosicoesJogaveis[4] == CPU && pPosicoesJogaveis[8] == CPU) return CPU;
		else if(pPosicoesJogaveis[2] == jogador && pPosicoesJogaveis[4] == jogador && pPosicoesJogaveis[6] == jogador) return jogador;
		else if(pPosicoesJogaveis[2] == CPU && pPosicoesJogaveis[4] == CPU && pPosicoesJogaveis[6] == CPU) return CPU;
		else return 0;
		
	}
	
	void jogo::randomSeqAI(void){
		
		int controle = 0;
		
		for (int i = 0; i < 8; i++){
		
			if( matrizPossibilidades[i] == 0){
			
				possibilidadesPossiveis[controle] = i;
				controle++;
			
			}
			
		}
		randomAI = rand() % controle;
		ultimaJogadaAI = possibilidadesPossiveis[randomAI];
	}
	
	int jogo::AI(void){
		
		int jogadaAI = 0;
	
		if(boolAI == 0){
			randomSeqAI();
			boolAI = 1;
		}
		else{
			if(matrizPossibilidades[ultimaJogadaAI] == 0);
			else randomSeqAI();
		}
		
		
		int j = 0;
		
		for(int i = 0; i < 8; i++){
				
			if(possibilidadesPossiveis[ultimaJogadaAI] == i){
					
				if(i <= 2){
			
					if(i==0) j = 0;
					else if(i==1) j = 3;
					else if(i==2) j = 6;
				
					if(pPosicoesJogaveis[j] == 0) jogadaAI = j;
					else if(pPosicoesJogaveis[j + 1] == 0) jogadaAI = j + 1;
					else if(pPosicoesJogaveis[j + 2] == 0) jogadaAI = j + 2;
				
				}
				else if(i>=3 && i<=5){
					
					if(i==3) j = 0;
					else if(i==4) j = 1;
					else if(i==5) j = 2;
				
					if(pPosicoesJogaveis[j] == 0) jogadaAI = j;
					else if(pPosicoesJogaveis[j + 3] == 0) jogadaAI = j + 3;
					else if(pPosicoesJogaveis[j + 6] == 0) jogadaAI = j + 6;
				
				}
				else if(i==6){
					j = 0;
					if(pPosicoesJogaveis[j] == 0) jogadaAI = j;
					else if(pPosicoesJogaveis[j + 4] == 0) jogadaAI = j + 4;
					else if(pPosicoesJogaveis[j + 8] == 0) jogadaAI = j + 8;
				
				}
				else if(i==7){
					j = 2;
					if(pPosicoesJogaveis[j] == 0) jogadaAI = j;
					else if(pPosicoesJogaveis[j + 2] == 0) jogadaAI = j + 2;
					else if(pPosicoesJogaveis[j + 4] == 0) jogadaAI = j + 4;
				}
			}
		}
		
		return jogadaAI;
	}
	
int main(void){
	
	jogo jogo1;
	
	int jogadaAtual = 0, sucesso = 1;
	
	jogo1.print();
	//cin >> jogador >> endl; //Aqui vai a escolha do jogador.
	
	jogo1.jogador = 1;
	jogo1.CPU = 2;
	
	
	while(jogo1.vezesJogadas < 9){
		
		//Jogador
		do{
			//cin >> jogadaAtual >> endl; //Aqui vai a escolha do jogador.
			jogadaAtual = rand() % 9;
			sucesso = jogo1.jogar(jogo1.jogador, jogadaAtual);
		}while(sucesso!=0);
		
		sucesso = 1;
		
		cout << " \nvezesJogadas: " << jogo1.vezesJogadas << " \nGanhador: " << jogo1.ganhador;
		
		if(jogo1.ganhador != 0) break;
		
		//CPU
		do{
			jogadaAtual = jogo1.AI();
			sucesso = jogo1.jogar(jogo1.CPU, jogadaAtual);
		}while(sucesso!=0);
		
		sucesso = 1;

		cout << " \nvezesJogadas: " << jogo1.vezesJogadas << " \nGanhador: " << jogo1.ganhador;
		
		if(jogo1.ganhador != 0) break;
		
	};

	if(jogo1.ganhador == 0) cout << "\n VELHAAAA " << endl;
	else if(jogo1.ganhador == jogo1.jogador) cout << "\n Jogador Ganhou!!! " << endl;
	else if(jogo1.ganhador == jogo1.CPU) cout << "\n CPU Ganhou!!! " << endl;
	
	return 0;
}
